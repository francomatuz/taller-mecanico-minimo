// WhatsApp Web Service (Versi√≥n Simplificada)
// Abre WhatsApp Web con mensajes pre-escritos

class WhatsAppWebService {
  // Enviar mensaje individual (abre WhatsApp Web)
  async sendMessage(phoneNumber: string, message: string): Promise<boolean> {
    try {
      console.log(`üì± Abriendo WhatsApp Web para ${phoneNumber}...`);
      
      // Limpiar n√∫mero de tel√©fono
      const cleanPhone = phoneNumber.replace(/\D/g, '');
      
      // Crear URL de WhatsApp Web
      const url = `https://web.whatsapp.com/send?phone=${cleanPhone}&text=${encodeURIComponent(message)}`;
      
      // Abrir en nueva ventana
      window.open(url, '_blank');
      
      console.log(`‚úÖ WhatsApp Web abierto para ${phoneNumber}`);
      return true;
      
    } catch (error) {
      console.error(`‚ùå Error abriendo WhatsApp Web para ${phoneNumber}:`, error);
      return false;
    }
  }

  // Enviar recordatorio de servicio
  async sendServiceReminder(clientName: string, phoneNumber: string, autoInfo: string, lastService: string): Promise<boolean> {
    const message = `üîß *Recordatorio de Servicio*

Hola ${clientName}!

Tu veh√≠culo *${autoInfo}* necesita servicio.
√öltimo service: ${lastService}

¬øTe gustar√≠a agendar una cita?

Saludos,
Taller Mec√°nico`;

    return this.sendMessage(phoneNumber, message);
  }

  // Enviar recordatorio anual para clientes fieles
  async sendAnnualReminder(clientName: string, phoneNumber: string, autoInfo: string): Promise<boolean> {
    const message = `üèÜ *Cliente Fiel - Recordatorio Anual*

Hola ${clientName}!

Como cliente fiel, queremos recordarte que tu veh√≠culo *${autoInfo}* necesita su servicio anual.

¬øTe gustar√≠a agendar una cita?

Saludos,
Taller Mec√°nico`;

    return this.sendMessage(phoneNumber, message);
  }
}

// Instancia singleton
export const whatsappPuppeteer = new WhatsAppWebService();

// Funci√≥n para detectar si es dispositivo m√≥vil
const isMobileDevice = (): boolean => {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
         window.innerWidth <= 768 ||
         'ontouchstart' in window;
};

// Funci√≥n para abrir WhatsApp (detecta dispositivo autom√°ticamente)
export const openWhatsAppWeb = (phoneNumber: string, message: string) => {
  const cleanPhone = phoneNumber.replace(/\D/g, '');
  const encodedMessage = encodeURIComponent(message);
  
  if (isMobileDevice()) {
    // Dispositivo m√≥vil: abrir WhatsApp nativo
    const whatsappUrl = `whatsapp://send?phone=${cleanPhone}&text=${encodedMessage}`;
    
    // Intentar abrir WhatsApp nativo
    window.location.href = whatsappUrl;
    
    // Fallback: si WhatsApp no est√° instalado, abrir WhatsApp Web
    setTimeout(() => {
      const webUrl = `https://web.whatsapp.com/send?phone=${cleanPhone}&text=${encodedMessage}`;
      window.open(webUrl, '_blank');
    }, 1000);
    
    console.log('üì± WhatsApp nativo abierto (m√≥vil)');
  } else {
    // Computadora: abrir WhatsApp Web
    const webUrl = `https://web.whatsapp.com/send?phone=${cleanPhone}&text=${encodedMessage}`;
    window.open(webUrl, '_blank');
    
    console.log('üíª WhatsApp Web abierto (desktop)');
  }
};

// Funci√≥n para generar mensaje de recordatorio
export const generateReminderMessage = (cliente: string, auto: string, ultimoService: string): string => {
  return `üîß *Recordatorio de Servicio*

Hola ${cliente}!

Tu veh√≠culo *${auto}* necesita servicio.
√öltimo service: ${ultimoService}

¬øTe gustar√≠a agendar una cita?

Saludos,
Taller Mec√°nico`;
};

// Funci√≥n para generar mensaje completo de ficha con servicios
export const generateFichaCompletaMessage = (ficha: any, servicios: any[]): string => {
  const formatDate = (date: string) => {
    return new Date(date + 'T00:00:00').toLocaleDateString('es-ES');
  };

  let message = `üìã *FICHA DE SERVICIO - TALLER NICAR* üöó

*VEH√çCULO:*
‚Ä¢ Marca: ${ficha.marca}
‚Ä¢ Modelo: ${ficha.modelo}
‚Ä¢ A√±o: ${ficha.a√±o}
‚Ä¢ Patente: ${ficha.patente || 'No especificada'}
‚Ä¢ Chasis: ${ficha.numero_chasis || 'No especificado'}
‚Ä¢ Kilometraje: ${ficha.kilometraje ? ficha.kilometraje.toLocaleString() + ' km' : 'No especificado'}

*SERVICIOS REALIZADOS:*`;

  if (servicios && servicios.length > 0) {
    servicios.forEach((servicio, index) => {
      message += `\n\n*Servicio ${index + 1}:*
‚Ä¢ Fecha: ${formatDate(servicio.fecha_trabajo || servicio.fecha_ingreso)}
‚Ä¢ Kilometraje: ${servicio.kilometraje ? servicio.kilometraje.toLocaleString() + ' km' : 'No especificado'}`;

      if (servicio.orden_trabajo) {
        message += `\n‚Ä¢ Orden: ${servicio.orden_trabajo}`;
      }
      if (servicio.repuestos_utilizados) {
        message += `\n‚Ä¢ Repuestos: ${servicio.repuestos_utilizados}`;
      }
      if (servicio.trabajo_realizado) {
        message += `\n‚Ä¢ Trabajo: ${servicio.trabajo_realizado}`;
      }
      if (servicio.observaciones) {
        message += `\n‚Ä¢ Observaciones: ${servicio.observaciones}`;
      }
      if (servicio.es_service) {
        message += `\n‚Ä¢ ‚úÖ Service Programado`;
        if (servicio.proximo_service) {
          message += `\n‚Ä¢ Pr√≥ximo Service: ${formatDate(servicio.proximo_service)}`;
        }
      }
    });
  } else {
    message += `\n\nNo hay servicios registrados a√∫n.`;
  }

  message += `\n\n*FECHA DE INGRESO:* ${formatDate(ficha.fecha_ingreso)}`;

  if (ficha.fecha_trabajo) {
    message += `\n*FECHA DE FINALIZACI√ìN:* ${formatDate(ficha.fecha_trabajo)}`;
  }

  message += `\n\nTaller Nicar - Servicio de Calidad`;

  return message;
};
